map $cookie_token $auth_header {
    "~^(?<v>.*)$" "Bearer $v";
    default "Bearer invalid";
}

map $http_authorization $bearer_header {
    "" "$auth_header";
    default $http_authorization;
}

server {
    listen 80;
    server_name labforge.mrtstg.local;

    return 301 https://$host$request_uri;
}

server {
    server_name labforge.mrtstg.local;
    listen 443 ssl http2;

    ssl_certificate /etc/nginx/ssl/labforge.crt;
    ssl_certificate_key /etc/nginx/ssl/labforge.key;

    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;

    proxy_cache        off;
    proxy_redirect     off;
    proxy_set_header   Host $host;
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Host $server_name;
    proxy_set_header Authorization $bearer_header;
    add_header Authorization $auth_header;

    location /docs {
        alias /etc/nginx/docs/;
        index index.html index.htm;
        try_files $uri $uri/ /docs/index.html;
    }

    location / {
        #auth_request /token-frontend-check;
        #auth_request_set $new_cookie $sent_http_set_cookie;
        proxy_pass http://frontend:8000;
        add_header Authorization $bearer_header;
        proxy_intercept_errors on;
        error_page 401 = @error401;
        error_page 403 = @norights;
        error_page 404 = @notfound;
        error_page 500 = @alldown;
    }

    location /api/cluster/ {
        proxy_pass http://cluster:8000;
    }

    location /api/auth/ {
        proxy_pass http://auth:8000;
    }

    location /api/deployment/ {
        proxy_pass http://deployment:8000;
    }

    location /api/render {
        proxy_pass http://kroki:8000;
    }

    location ~ "/api/vm/(?<port>.*)/vnc" {
        auth_request /vm-check;
        set $vmport $port;

        rewrite ^(.*)$ /?token=$port break;
        proxy_pass http://websockify:6080;
        proxy_buffering off;
        proxy_read_timeout 600s;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    location = /vm-check {
        rewrite ^(.*)$          /api/deployment/vmport/access break;
        proxy_pass_request_body off;
        proxy_set_header        X-VM-PORT $vmport;
        proxy_set_header        Authorization $auth_header;
        proxy_set_header        Content-Length "";
        proxy_set_header        X-Original-URI $request_uri;
        proxy_pass              http://deployment:8000;
        internal;
    }

    location = /token-frontend-check {
        rewrite ^(.*)$          /api/auth/capabilities break;
        proxy_pass_request_body off;
        proxy_set_header        Authorization $auth_header;
        proxy_set_header        Content-Length "";
        proxy_set_header        X-Original-URI $request_uri;
        proxy_pass              http://auth:8000;
        internal;
    }

    location @alldown {
        rewrite ^(.*)$          /internalerror break;
        proxy_pass http://frontend:8000;
        internal;
    }

    location @notfound {
        rewrite ^(.*)$          /notfound break;
        proxy_pass http://frontend:8000;
        internal;
    }

    location @norights {
        rewrite ^(.*)$          /norights break;
        proxy_pass http://frontend:8000;
        internal;
    }

    location @error401 {
        return 302 /api/auth/login?redirectTo=$request_uri;
    }
}
